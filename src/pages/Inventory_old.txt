/**
 * @author Arthur Jezequel
 */

import {Card} from "../components/Card/Card.tsx";
import React from "react";
import {useSelector} from "react-redux";
import {RootState} from "../store.ts";
import {fetchWIPCards} from "../api/wipCardService.ts"
import { useEffect, useState } from 'react';

// TODO : This take the userId as input so it can fetch all cards of the current user (filter FetchAllCards() on userId)

/**
 * Inventory page that displays all the user's card
 * @constructor
 */
// export const Inventory =() => {
//     const cardId:number = useSelector((state:RootState ) => state.cardReducer.cardId)
//     // QUITTER L INVENTAIRE DEVRAIT REMETTRE LE STATE A NULL !
//     // TODO : ASSURER QUE ACHAT ET VENTE METTE AUSSI A JOUR L UTILISATEUR COURANT

//     // Props : wip boolean
//     // Si oui, alors on fetch de cardService getWipCards()
//     // Si non, on fait ce qu'il en un 
//     const cardIds: number[] | undefined = useSelector((state:RootState) => state.user.user?.cardList)
//     const cardRows = [] as React.ReactNode[];
//     cardIds?.forEach((id:number) => {
//         cardRows.push(<Card cardId={id} display="row"/>);
//     })
//     return (
//         <>
//             <table>
//                 {cardRows}
//             </table>
//             <div>
//                 <Card cardId={cardId} display="full" />
//             </div>
//         </>
//     );
// }
interface IProps {
    isWip: boolean;
}

export const Inventory =(props:IProps) => {
    const cardId:number = useSelector((state:RootState ) => state.cardReducer.cardId)
    const userId:number = useSelector((state:RootState ) => state.user.user?.id ?? -1)
    // QUITTER L INVENTAIRE DEVRAIT REMETTRE LE STATE A NULL !
    // TODO : ASSURER QUE ACHAT ET VENTE METTE AUSSI A JOUR L UTILISATEUR COURANT

    // Props : wip boolean
    // Si oui, alors on fetch de cardService getWipCards()
    // Si non, on fait ce qu'il en un 

    let cardIds: number[] | undefined;

    // if (props){ // Cela veut dire que l'on veut les wip cards du scheduler
    //     const cardList = await fetchWIPCards(userId);
    //     cardList.forEach(card => {cardIds.push(card.id);});
    // }
    // else { // Cela veut dire qu'on veut les cards finies du monolith
    //     cardIds = useSelector((state:RootState) => state.user.user?.cardList)
    // }

    useEffect(() => {
        const fetchCards = async () => {
            if (props.isWip) {
                // Si on veut les WIP cards, on attend la promesse
                try {
                    const cardList = await fetchWIPCards(userId);
                    cardIds = cardList.map(card => card.id);
                } catch (error) {
                    console.error('Erreur lors de la récupération des WIP cards:', error);
                }
            } else {
                // Si on veut les cartes finies, on récupère depuis le monolith
                cardIds = useSelector((state:RootState) => state.user.user?.cardList)
            }
        };

        fetchCards();
    }, [props, userId]); 

    const cardRows = [] as React.ReactNode[];
    cardIds?.forEach((id:number) => {
        cardRows.push(<Card cardId={id} display="row"/>);
    })
    return (
        <>
            <table>
                {cardRows}
            </table>
            <div>
                <Card cardId={cardId} display="full" />
            </div>
        </>
    );
}